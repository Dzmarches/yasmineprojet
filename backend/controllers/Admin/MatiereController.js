import EcoleMatiere from '../../models/Admin/EcoleMatiere.js';
import Matiere from '../../models/Admin/Matiere.js';
import { Op } from 'sequelize';

// R√©cup√©rer toutes les mati√®res non archiv√©es

// R√©cup√©rer toutes les mati√®res non archiv√©es en fonction du r√¥le de l'utilisateur
export const getMatieres = async (req, res) => {
    try {
        // R√©cup√©rer les informations de l'utilisateur connect√©
        const ecoleId = req.user.ecoleId; // ecoleId de l'AdminPrincipal
        const roles = req.user.roles; // R√¥les de l'utilisateur
        const userId = req.user.id; // ID de l'utilisateur connect√©
        const ecoleeId = req.user.ecoleeId; // ecoleeId de l'Admin

        // Afficher les informations de l'utilisateur pour le d√©bogage
        console.log('üü¢ ecoleId:', ecoleId);
        console.log('üü¢ roles:', roles);
        console.log('üü¢ userId:', userId);
        console.log('üü¢ ecoleeId:', ecoleeId);

        // V√©rifier les r√¥les de l'utilisateur
        const isAdminPrincipal = roles.includes('AdminPrincipal');
        const isAdmin = roles.includes('Admin');

        console.log('üü¢ isAdminPrincipal:', isAdminPrincipal);
        console.log('üü¢ isAdmin:', isAdmin);

        let matieres;

        if (isAdminPrincipal) {
            // R√©cup√©rer les mati√®res pour AdminPrincipal (filtrer par ecoleId)
            matieres = await Matiere.findAll({
                include: [{
                    model: EcoleMatiere,
                    where: { ecoleId }, // Filtrer par ecoleId
                }],
                where: { archiver: 0 }, // Ne r√©cup√©rer que les mati√®res non archiv√©es
            });
        } else if (isAdmin) {
            // R√©cup√©rer les mati√®res pour Admin (filtrer par ecoleeId)
            matieres = await Matiere.findAll({
                include: [{
                    model: EcoleMatiere,
                    where: { ecoleeId }, // Filtrer par ecoleeId
                }],
                where: { archiver: 0 }, // Ne r√©cup√©rer que les mati√®res non archiv√©es
            });
        } else {
            // Si l'utilisateur n'a pas de r√¥le valide, retourner une erreur
            return res.status(403).json({ error: 'Acc√®s non autoris√©' });
        }

        res.json(matieres);
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des mati√®res :", error);
        res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des mati√®res' });
    }
};

export const getMatieresArchiver = async (req, res) => {
    try {
        // R√©cup√©rer les informations de l'utilisateur connect√©
        const ecoleId = req.user.ecoleId; // ecoleId de l'AdminPrincipal
        const roles = req.user.roles; // R√¥les de l'utilisateur
        const userId = req.user.id; // ID de l'utilisateur connect√©
        const ecoleeId = req.user.ecoleeId; // ecoleeId de l'Admin

        // Afficher les informations de l'utilisateur pour le d√©bogage
        console.log('üü¢ ecoleId:', ecoleId);
        console.log('üü¢ roles:', roles);
        console.log('üü¢ userId:', userId);
        console.log('üü¢ ecoleeId:', ecoleeId);

        // V√©rifier les r√¥les de l'utilisateur
        const isAdminPrincipal = roles.includes('AdminPrincipal');
        const isAdmin = roles.includes('Admin');

        console.log('üü¢ isAdminPrincipal:', isAdminPrincipal);
        console.log('üü¢ isAdmin:', isAdmin);

        let matieres;

        if (isAdminPrincipal) {
            // R√©cup√©rer les mati√®res pour AdminPrincipal (filtrer par ecoleId)
            matieres = await Matiere.findAll({
                include: [{
                    model: EcoleMatiere,
                    where: { ecoleId }, // Filtrer par ecoleId
                }],
                where: { archiver: 1 }, // Ne r√©cup√©rer que les mati√®res non archiv√©es
            });
        } else if (isAdmin) {
            // R√©cup√©rer les mati√®res pour Admin (filtrer par ecoleeId)
            matieres = await Matiere.findAll({
                include: [{
                    model: EcoleMatiere,
                    where: { ecoleeId }, // Filtrer par ecoleeId
                }],
                where: { archiver: 0 }, // Ne r√©cup√©rer que les mati√®res non archiv√©es
            });
        } else {
            // Si l'utilisateur n'a pas de r√¥le valide, retourner une erreur
            return res.status(403).json({ error: 'Acc√®s non autoris√©' });
        }

        res.json(matieres);
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des mati√®res :", error);
        res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des mati√®res' });
    }
};

// Ajouter une nouvelle mati√®re
export const createMatiere = async (req, res) => {
    const { nom, nomarabe, ecoleId, ecoleeId } = req.body;
    const image = req.file ? req.file.filename : null;

    console.log("Donn√©es re√ßues dans createMatiere :", { nom, nomarabe, image, ecoleId, ecoleeId });

    if (!nom || !nomarabe || !ecoleId) {
        return res.status(400).json({ error: 'Le nom, le nom arabe et ecoleId sont requis.' });
    }

    try {
        // Recherche ou cr√©ation de la mati√®re
        const [matiere, created] = await Matiere.findOrCreate({
            where: { nom, nomarabe },
            defaults: { image: image ?? null, archiver: 0 }
        });

        if (!created) {
            console.log("‚ÑπÔ∏è La mati√®re existait d√©j√† :", matiere.nom);
        } else {
            console.log("‚úÖ Mati√®re cr√©√©e :", matiere.nom);
        }
        const cleanedEcoleeId = ecoleeId === "null" || ecoleeId === undefined ? null : ecoleeId;

        // V√©rifier si la relation existe d√©j√†
        const relationExist = await EcoleMatiere.findOne({
            where: {
                matiereId: matiere.id,
                ecoleId,
                ecoleeId: cleanedEcoleeId
            }
        });

        if (!relationExist) {
            await EcoleMatiere.create({
                matiereId: matiere.id,
                ecoleId,
                ecoleeId: cleanedEcoleeId
            });

            console.log("‚úÖ Relation EcoleMatiere cr√©√©e !");
        } else {
            console.log("‚ÑπÔ∏è La relation EcoleMatiere existait d√©j√†.");
        }

        res.status(201).json({
            message: created
                ? 'Mati√®re ajout√©e avec succ√®s'
                : 'Mati√®re d√©j√† existante, mais relation ajout√©e avec succ√®s (ou d√©j√† pr√©sente)',
            matiere
        });
    } catch (err) {
        console.error("‚ùå Erreur lors de l'ajout de la mati√®re :", err);
        res.status(500).json({ error: 'Erreur lors de l\'ajout de la mati√®re' });
    }
};

// Modifier une mati√®re
export const updateMatiere = async (req, res) => {
    const { id } = req.params;
    const { nom, nomarabe, ecoleId, ecoleeId } = req.body;
    const image = req.file ? req.file.filename : null;

    // Afficher les donn√©es re√ßues
    console.log("Donn√©es re√ßues dans updateMatiere :", { id, nom, nomarabe, image, ecoleId, ecoleeId });

    if (!nom || !nomarabe || !image || !ecoleId) {
        return res.status(400).json({ error: 'Le nom, le nom arabe, l\'image, ecoleId sont requis.' });
    }

    try {
        const matiere = await Matiere.findOne({ where: { id } });
        if (!matiere) return res.status(404).json({ error: 'Mati√®re non trouv√©e' });

        await matiere.update({ nom, nomarabe, image });

        // Afficher la mati√®re mise √† jour
        console.log("‚úÖ Mati√®re mise √† jour :", matiere);

        // Convertir ecoleeId en null si c'est la cha√Æne "null"
        const ecoleeIdFinal = ecoleeId === "null" ? null : ecoleeId;

        const ecoleMatiereData = {
            ecoleId,
            ecoleeId: ecoleeIdFinal, // Utiliser ecoleeIdFinal ici
            matiereId: id
        };

        const ecoleMatiere = await EcoleMatiere.findOne({ where: { matiereId: id } });

        if (ecoleMatiere) {
            await ecoleMatiere.update(ecoleMatiereData);
        } else {
            await EcoleMatiere.create(ecoleMatiereData);
        }

        // Afficher la relation EcoleMatiere mise √† jour
        console.log("‚úÖ Relation EcoleMatiere mise √† jour avec succ√®s !");

        res.status(200).json({ message: 'Mati√®re modifi√©e avec succ√®s', matiere });
    } catch (err) {
        console.error("Erreur lors de la modification de la mati√®re :", err);
        res.status(500).json({ error: 'Erreur lors de la modification de la mati√®re' });
    }
};
// Supprimer une mati√®re (archiver)
export const deleteMatiere = async (req, res) => {
    const { id } = req.params;

    try {
        const [updated] = await Matiere.update({ archiver: 1 }, { where: { id } });
        if (!updated) return res.status(404).json({ error: 'Mati√®re non trouv√©e' });

        res.status(200).json({ message: `Mati√®re avec l'ID ${id} archiv√©e avec succ√®s` });
    } catch (err) {
        console.error("Erreur lors de l'archivage de la mati√®re :", err);
        res.status(500).json({ error: 'Erreur lors de l\'archivage de la mati√®re' });
    }
};

// Rechercher des mati√®res
export const searchMatieres = async (req, res) => {
    const { term } = req.query;

    if (!term) {
        return res.status(400).json({ error: 'Le terme de recherche est requis.' });
    }

    try {
        const matieres = await Matiere.findAll({
            where: {
                [Op.or]: [
                    { nom: { [Op.like]: `%${term}%` } },
                    { nomarabe: { [Op.like]: `%${term}%` } }
                ]
            }
        });

        res.status(200).json(matieres);
    } catch (error) {
        console.error('Erreur lors de la recherche des mati√®res:', error);
        res.status(500).json({ error: 'Erreur serveur lors de la recherche des mati√®res' });
    }
};